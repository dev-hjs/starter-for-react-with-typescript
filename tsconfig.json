{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    "incremental": true, // Enable incremental compilation
    "target": "es6", // ie 대응이 필요하면 'ES3'나 'ES5' 사용. Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ES2021', or 'ESNEXT'.
    "module": "esnext", // Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'.
    // "lib": [], // 'target' 옵션에서 지정한 ECMAScript target version에서 제공하는 라이브러리 중 사용하고 싶은 특정 라이브러리만 골라서 설정. 비활성화 시 모든 라이브러리를 사용할 수 있다. Specify library files to be included in the compilation.
    "allowJs": false, // 타입스크립트와 자바스크립트를 함께 사용할 때 true로 지정. Allow javascript files to be compiled.
    "checkJs": false, // 자바스크립트 파일에서 발생하는 에러를 표시. 'allowJs' 옵션을 true로 지정했다면 이 옵션도 true로 지정하는 편이 좋다. Report errors in .js files.
    "jsx": "react", // Specify JSX code generation: 'preserve', 'react-native', 'react', 'react-jsx' or 'react-jsxdev'.
    "declaration": false, // 내가 만든 코드를 라이브러리 형식으로 배포할 경우에 true로 지정. Generates corresponding '.d.ts' file.
    "declarationMap": false, // 내가 만든 코드를 라이브러리 형식으로 배포할 경우에 true로 지정. Generates a sourcemap for each corresponding '.d.ts' file.
    "sourceMap": false, // 디버깅을 수월하게 해주는 옵션. .map 파일을 생성하여 컴파일 된 자바스크립트 파일과 원본 타입스크립트 파일의 위치를 알 수 있도록 해준다. Generates corresponding '.map' file.
    // "outFile": "./", // 모든 타입스크립트 파일을 단 하나의 자바스크립트 파일로 컴파일 할 경우 true로 지정. Concatenate and emit output to single file.
    // "outDir": "./dist", // 컴파일 된 자바스크립트 파일을 내보낼 위치. Redirect output structure to the directory.
    // "rootDir": "./", // ts 파일이 포함된 최상위 폴더 위치. Specify the root directory of input files. Use to control the output directory structure with --outDir.
    // "composite": true, // true로 지정하면 이전에 빌드했던 내용을 기억하여, 다음 번 빌드 시 더 빠르게 빌드할 수 있다. Enable project compilation
    // "tsBuildInfoFile": "./", // 'incremental' 옵션을 true로 지정했을 경우, 관련 빌드 정보를 기억하는 파일의 경로를 설정. Specify file to store incremental compilation information
    "removeComments": true, // 컴파일 시 주석을 제거. Do not emit comments to output.
    "noEmitOnError": true, // 컴파일 에러가 발생하면 컴파일을 중단
    "noEmit": true, // 컴파일 시 에러 체크만 하고, 자바스크립트 파일로 변환하지는 않는다. Do not emit outputs.
    // "importHelpers": true, // 오래된 타입스크립트 버전에서 문제가 되는 부분과 관련된 옵션이라 최근 버전을 사용한다면 신경쓰지 않아도 된다. Import emit helpers from 'tslib'. */
    // "downlevelIteration": true, // 오래된 타입스크립트 버전에서 문제가 되는 부분과 관련된 옵션이라 최근 버전을 사용한다면 신경쓰지 않아도 된다. Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    "isolatedModules": true, // 각각의 파일을 다른 모듈로 변환. false로 지정할 경우 모든 파일은 global 스코프가 된다. Transpile each file as a separate module (similar to 'ts.transpileModule').

    /* Strict Type-Checking Options */
    "strict": true, // false로 지정할 경우 자바스크립트를 사용하는 것과 동일하기 때문에 true로 지정하고 개발하면 된다. true로 지정했다면 아래 나열된 옵션은 신경쓰지 않아도 된다. Enable all strict type-checking options.
    // "noImplicitAny": true,                       /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                    /* Enable strict null checks. */
    // "strictFunctionTypes": true,                 /* Enable strict checking of function types. */
    // "strictBindCallApply": true,                 /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,        /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                      /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                        /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                      /* Report errors on unused locals. */
    // "noUnusedParameters": true,                  /* Report errors on unused parameters. */
    // "noImplicitReturns": true,                   /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,          /* Report errors for fallthrough cases in switch statement. */
    // "noUncheckedIndexedAccess": true,            /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                  /* Ensure overriding members in derived classes are marked with an 'override' modifier. */
    // "noPropertyAccessFromIndexSignature": true,  /* Require undeclared properties from index signatures to use element accesses. */

    /* Module Resolution Options */
    "moduleResolution": "node", // Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).
    // "baseUrl": "./",                             /* Base directory to resolve non-absolute module names. */
    // "paths": {},                                 /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                              /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [], // ambient module을 사용하기 위해 이곳에 d.ts 파일 경로 추가. List of folders to include type definitions from.
    // "types": [],                                 /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,        /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true, // Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.
    // "preserveSymlinks": true,                    /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,                /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                            /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                               /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                     /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                       /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": false, // 20220426 현재 stage 2 단계에 있는 기능. Enables experimental support for ES7 decorators.
    // "emitDecoratorMetadata": true,               /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "skipLibCheck": true, // Skip type checking of declaration files.
    "forceConsistentCasingInFileNames": true, // Disallow inconsistently-cased references to the same file.

    /* Additional Personal Options */
    "resolveJsonModule": true
  },
  "include": [
    // "next-env.d.ts", // next.js 프로젝트 시 필요
    "**/*.ts",
    "**/*.tsx"
  ],
  "exclude": ["node_modules", "**/*.spec.ts", "**/*.test.ts"]
  // "extends": "" // 상속 받으려는 tsconfig 파일 경로 입력
}
